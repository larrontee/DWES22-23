
Ejercicio
Crear una BD competicion
Crear una colección llamada pruebas con los siguientes datos:
[{nombre:"Carlos", mes:"Marzo", distKm:6, tiempoMin:42},
{nombre:"Elena", mes:"Marzo", distKm:10, tiempoMin:60},
{nombre:"Carlos", mes:"Marzo", distKm:2, tiempoMin:12},
{nombre:"Elena", mes:"Marzo", distKm:10, tiempoMin:61},
{nombre:"Carlos", mes:"Abril", distKm:5, tiempoMin:33},
{nombre:"Elena", mes:"Abril", distKm:42, tiempoMin:285},
{nombre:"Angel", mes:"Abril", distKm:5, tiempoMin:33}]




Hacer las siguientes operaciones usando agregaciones:
● Calcular el número de pruebas que ha realizado cada corredor.
db.pruebas.aggregate([{$group:{_id:{"nombre":"$nombre"},intentos:{$sum:1}}}])

● Calcular el número de pruebas que ha realizado cada corredor por mes.
db.pruebas.aggregate([{$group:{_id:{"nombre":"$nombre","mes":"$mes"},intentos:{$sum:1}}}])

● Calcular el número total de Kms recorridos por cada corredor.
db.pruebas.aggregate([{$group:{_id:{"nombre":"$nombre"},kms:{$sum:"$distKm"}}}])

● Calcular los kilómetros que corre cada uno de media al mes
db.pruebas.aggregate([{$group:{_id:{"nombre":"$nombre"},kmsMediaMes:{$avg:{"$distKm"}}}}}])
db.pruebas.aggregate([{$group:{_id:"$nombre",kmsMediaMes:{$avg:"$distKm"}}}])

● Visualizar las distintas distancias que ha corrido cada corredor en las pruebas.
db.pruebas.aggregate([{$group:{_id:"$nombre",listaKm:{$addToSet:"$distKm"}}}])
// db.pruebas.aggregate([{$group:{_id:{"nombre":"$nombre","mes":"$mes","distancia(Km)":"$distKm"}}}])
// db.pruebas.aggregate([{$group:{_id:{"nombre":"$nombre","mes":"$mes"},distancia:{$sum:"$distKm"}}}])


● Calcular el número medio de pruebas por corredor al mes (se cuenta el número de pruebas por persona y mes y a continuación se hace la media de este dato)
db.pruebas.aggregate([{$group:{_id:{"nombre":"$nombre","mes":"$mes"},intentos:{$sum:1}}},{$group:{_id:"$_id.nombre",media:{$avg:"$intentos"}}}])



// db.collection.find().explain("executionStats")

Idea:
- Sabemos contar el número de pruebas por mes.
- Sabemos hacer la media de unos valores

¡usemos 2 etapas!

● Visualizar en cada mes qué distancias se han hecho en alguna sesión. (Si una
distancia se ha corrido varias veces en ese mes debe aparecer varias veces).
db.pruebas.aggregate()



● Obtener la mayor y menor distancia recorrida por cada corredor.

● Queremos disponer de los datos de distancias recorridas en millas, sabiendo que una milla = 1,60934 km

● Obtener la media en kilómetros mensuales de cada corredor, pero solo para aquellos
valores medios que sean superiores a 5km.

● Calcular la media de kilómetros por corredor y mes, ordenado por mes.


● Mostrar el corredor que tiene mayor media absoluta.

● Calcula la media de pruebas realizadas por cada persona mensualmente.
Idea:Redirige la salida de una agrupación creando una nueva colección. No muestra
nada en la salida, pero puedes comprobarlo haciendo un find sobre la nueva
colección de salida.

● Creamos una nueva colección en la BD llamada gustos, con los siguientes datos:
[{nombre:"Carlos", aficiones:["siesta","cine"]},
{nombre:"Elena", aficiones:["correr","cine"]},
{nombre:"Ana", aficiones:["viajar","cine"]},
{nombre:"Angel", aficiones:["correr","montaña", "cine"]}]

● Queremos saber el número de personas con el que cuenta cada afición.
Idea:Cuando tenemos documentos que contienen un array y queremos agrupar por
valores del array, a veces conviene eliminar los arrays y convertirlos en múltiples
documentos. En realidad estamos "normalizando" (primera forma normal). Y agrupar
sobre esos documentos.


